'use client'

import React, { useState, useEffect, useRef } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import {
  AlertTriangle,
  Shield,
  Brain,
  CheckCircle,
  X,
  Clock,
  Eye,
  HelpCircle,
  FileText,
  Phone,
  Users,
  Settings,
  Bot,
  User,
  ExternalLink
} from 'lucide-react'
import { cn } from '@/lib/utils'

interface AIDisclosureProps {
  type: 'full' | 'abbreviated' | 'minimal' | 'crisis'
  onAccept?: () => void
  onDecline?: () => void
  mandatory?: boolean
  showComprehensionTest?: boolean
  therapistName?: string
  className?: string
}

interface ComprehensionQuestion {
  id: string
  question: string
  options: string[]
  correctAnswer: number
  explanation: string
}

export default function AIDisclosureFramework({
  type = 'full',
  onAccept,
  onDecline,
  mandatory = true,
  showComprehensionTest = true,
  therapistName = 'AI Therapist',
  className
}: AIDisclosureProps) {
  const [isVisible, setIsVisible] = useState(true)
  const [currentStep, setCurrentStep] = useState(0)
  const [readingTime, setReadingTime] = useState(0)
  const [hasPassedTest, setHasPassedTest] = useState(false)
  const [showTest, setShowTest] = useState(false)
  const [testAnswers, setTestAnswers] = useState<Record<string, number>>({})
  const [testResults, setTestResults] = useState<Record<string, boolean>>({})
  const [allCorrect, setAllCorrect] = useState(false)
  const startTimeRef = useRef<number>(Date.now())
  const minReadingTime = type === 'full' ? 45000 : type === 'abbreviated' ? 30000 : 15000 // milliseconds

  useEffect(() => {
    const timer = setInterval(() => {
      setReadingTime(Date.now() - startTimeRef.current)
    }, 1000)

    return () => clearInterval(timer)
  }, [])

  const disclosureContent = {
    full: {
      steps: [
        {
          title: "Understanding AI Therapy (2025)",
          icon: Bot,
          content: (
            <div className="space-y-4">
              <div className="bg-amber-50 border border-amber-200 rounded-lg p-4">
                <div className="flex items-start space-x-3">
                  <AlertTriangle className="h-5 w-5 text-amber-600 mt-0.5 flex-shrink-0" />
                  <div>
                    <h4 className="font-semibold text-amber-800 mb-2">Important: This is an AI System</h4>
                    <p className="text-amber-700 text-sm">
                      You are about to interact with <strong>{therapistName}</strong>, an artificial intelligence system. 
                      This is NOT a human therapist, psychologist, or medical professional.
                    </p>
                  </div>
                </div>
              </div>
              
              <div className="space-y-3">
                <p className="text-gray-700">
                  <strong>What this means:</strong>
                </p>
                <ul className="space-y-2 text-sm text-gray-600 ml-4">
                  <li className="flex items-start space-x-2">
                    <span className="w-1.5 h-1.5 bg-blue-500 rounded-full mt-2 flex-shrink-0"></span>
                    <span>AI responses are generated by algorithms, not human judgment</span>
                  </li>
                  <li className="flex items-start space-x-2">
                    <span className="w-1.5 h-1.5 bg-blue-500 rounded-full mt-2 flex-shrink-0"></span>
                    <span>Cannot replace professional medical or psychiatric care</span>
                  </li>
                  <li className="flex items-start space-x-2">
                    <span className="w-1.5 h-1.5 bg-blue-500 rounded-full mt-2 flex-shrink-0"></span>
                    <span>Responses are based on training data, not real therapeutic relationships</span>
                  </li>
                  <li className="flex items-start space-x-2">
                    <span className="w-1.5 h-1.5 bg-blue-500 rounded-full mt-2 flex-shrink-0"></span>
                    <span>Cannot prescribe medications or make clinical diagnoses</span>
                  </li>
                </ul>
              </div>
            </div>
          )
        },
        {
          title: "AI Limitations & Risks",
          icon: Shield,
          content: (
            <div className="space-y-4">
              <div className="bg-red-50 border border-red-200 rounded-lg p-4">
                <div className="flex items-start space-x-3">
                  <AlertTriangle className="h-5 w-5 text-red-600 mt-0.5 flex-shrink-0" />
                  <div>
                    <h4 className="font-semibold text-red-800 mb-2">Critical Limitations</h4>
                    <ul className="space-y-1 text-sm text-red-700">
                      <li>• May not recognize all crisis situations</li>
                      <li>• Cannot provide emergency intervention</li>
                      <li>• Responses may contain errors or inappropriate advice</li>
                      <li>• Cannot understand context like a human therapist</li>
                      <li>• May exhibit algorithmic bias from training data</li>
                    </ul>
                  </div>
                </div>
              </div>

              <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                <h4 className="font-semibold text-blue-800 mb-2">When to Seek Human Help</h4>
                <ul className="space-y-1 text-sm text-blue-700">
                  <li>• Thoughts of suicide or self-harm</li>
                  <li>• Severe depression or anxiety</li>
                  <li>• Substance abuse issues</li>
                  <li>• Trauma or PTSD symptoms</li>
                  <li>• Medication-related questions</li>
                  <li>• Complex life situations requiring professional judgment</li>
                </ul>
              </div>
            </div>
          )
        },
        {
          title: "Human Alternatives",
          icon: Users,
          content: (
            <div className="space-y-4">
              <p className="text-gray-700 font-medium">
                Professional human support is always available and recommended for serious mental health concerns:
              </p>
              
              <div className="grid gap-3">
                <div className="bg-green-50 border border-green-200 rounded-lg p-4">
                  <div className="flex items-center space-x-3 mb-2">
                    <Phone className="h-5 w-5 text-green-600" />
                    <h4 className="font-semibold text-green-800">Crisis Resources</h4>
                  </div>
                  <div className="space-y-2 text-sm text-green-700">
                    <p><strong>988 Suicide & Crisis Lifeline:</strong> 988 or 1-800-273-8255</p>
                    <p><strong>Crisis Text Line:</strong> Text HOME to 741741</p>
                    <p><strong>Emergency:</strong> Call 911</p>
                  </div>
                </div>

                <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                  <div className="flex items-center space-x-3 mb-2">
                    <User className="h-5 w-5 text-blue-600" />
                    <h4 className="font-semibold text-blue-800">Professional Therapy</h4>
                  </div>
                  <div className="space-y-2 text-sm text-blue-700">
                    <p>• Licensed therapists and counselors</p>
                    <p>• Psychiatrists for medication management</p>
                    <p>• Specialized trauma and addiction treatment</p>
                    <p>• In-person and telehealth options available</p>
                  </div>
                </div>
              </div>

              <div className="bg-gray-50 border border-gray-200 rounded-lg p-4">
                <p className="text-sm text-gray-600 italic">
                  <strong>Recommendation:</strong> Use AI therapy as a supplement to, not replacement for, 
                  professional mental health care.
                </p>
              </div>
            </div>
          )
        },
        {
          title: "Data & Privacy (2025)",
          icon: FileText,
          content: (
            <div className="space-y-4">
              <div className="bg-indigo-50 border border-indigo-200 rounded-lg p-4">
                <h4 className="font-semibold text-indigo-800 mb-2">How Your Data is Used</h4>
                <ul className="space-y-2 text-sm text-indigo-700">
                  <li className="flex items-start space-x-2">
                    <CheckCircle className="h-4 w-4 text-indigo-600 mt-0.5 flex-shrink-0" />
                    <span>Conversations are encrypted and stored securely</span>
                  </li>
                  <li className="flex items-start space-x-2">
                    <CheckCircle className="h-4 w-4 text-indigo-600 mt-0.5 flex-shrink-0" />
                    <span>Used only to improve AI responses and your experience</span>
                  </li>
                  <li className="flex items-start space-x-2">
                    <CheckCircle className="h-4 w-4 text-indigo-600 mt-0.5 flex-shrink-0" />
                    <span>Never shared with third parties without consent</span>
                  </li>
                  <li className="flex items-start space-x-2">
                    <CheckCircle className="h-4 w-4 text-indigo-600 mt-0.5 flex-shrink-0" />
                    <span>You can delete your data at any time</span>
                  </li>
                </ul>
              </div>

              <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                <div className="flex items-start space-x-3">
                  <Eye className="h-5 w-5 text-yellow-600 mt-0.5 flex-shrink-0" />
                  <div>
                    <h4 className="font-semibold text-yellow-800 mb-2">Transparency Notice</h4>
                    <p className="text-sm text-yellow-700">
                      Our AI training data includes anonymized therapeutic conversations, 
                      evidence-based treatment protocols, and psychological research. 
                      We continuously monitor for bias and inappropriate responses.
                    </p>
                  </div>
                </div>
              </div>
            </div>
          )
        }
      ]
    },
    abbreviated: {
      steps: [
        {
          title: "AI Therapy Disclosure",
          icon: Bot,
          content: (
            <div className="space-y-4">
              <div className="bg-amber-50 border border-amber-200 rounded-lg p-4">
                <div className="flex items-start space-x-3">
                  <AlertTriangle className="h-5 w-5 text-amber-600 mt-0.5 flex-shrink-0" />
                  <div>
                    <h4 className="font-semibold text-amber-800 mb-2">This is an AI System</h4>
                    <p className="text-amber-700 text-sm">
                      <strong>{therapistName}</strong> is artificial intelligence, not a human therapist. 
                      It cannot replace professional mental health care.
                    </p>
                  </div>
                </div>
              </div>
              
              <div className="grid grid-cols-2 gap-3 text-sm">
                <div className="bg-red-50 border border-red-200 rounded-lg p-3">
                  <h5 className="font-semibold text-red-800 mb-1">Cannot:</h5>
                  <ul className="text-red-700 space-y-1">
                    <li>• Prescribe medication</li>
                    <li>• Handle emergencies</li>
                    <li>• Replace human therapy</li>
                  </ul>
                </div>
                <div className="bg-green-50 border border-green-200 rounded-lg p-3">
                  <h5 className="font-semibold text-green-800 mb-1">Crisis Help:</h5>
                  <ul className="text-green-700 space-y-1">
                    <li>• 988 Suicide Lifeline</li>
                    <li>• Text HOME to 741741</li>
                    <li>• Call 911 for emergency</li>
                  </ul>
                </div>
              </div>
            </div>
          )
        }
      ]
    },
    minimal: {
      steps: [
        {
          title: "AI Disclosure",
          icon: Bot,
          content: (
            <div className="bg-amber-50 border border-amber-200 rounded-lg p-4">
              <div className="flex items-start space-x-3">
                <Bot className="h-5 w-5 text-amber-600 mt-0.5 flex-shrink-0" />
                <div>
                  <p className="text-amber-800 font-medium">
                    <strong>{therapistName}</strong> is an AI system, not a human therapist.
                  </p>
                  <p className="text-amber-700 text-sm mt-1">
                    For crisis support: 988 Suicide Lifeline or 911 for emergency.
                  </p>
                </div>
              </div>
            </div>
          )
        }
      ]
    },
    crisis: {
      steps: [
        {
          title: "Crisis AI Disclosure",
          icon: AlertTriangle,
          content: (
            <div className="space-y-4">
              <div className="bg-red-50 border border-red-200 rounded-lg p-4">
                <div className="flex items-start space-x-3">
                  <AlertTriangle className="h-5 w-5 text-red-600 mt-0.5 flex-shrink-0" />
                  <div>
                    <h4 className="font-semibold text-red-800 mb-2">Crisis Situation Detected</h4>
                    <p className="text-red-700 text-sm mb-3">
                      <strong>This AI cannot provide emergency intervention.</strong> 
                      Please contact human crisis support immediately.
                    </p>
                    
                    <div className="space-y-2">
                      <div className="bg-red-100 rounded p-2">
                        <p className="font-semibold text-red-800">Immediate Help:</p>
                        <p className="text-red-700 text-sm">988 Suicide & Crisis Lifeline: 988</p>
                        <p className="text-red-700 text-sm">Crisis Text Line: Text HOME to 741741</p>
                        <p className="text-red-700 text-sm">Emergency: 911</p>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              
              <p className="text-gray-600 text-sm">
                You may continue with AI support as a supplement, but human intervention is strongly recommended.
              </p>
            </div>
          )
        }
      ]
    }
  }

  const comprehensionQuestions: ComprehensionQuestion[] = [
    {
      id: 'ai-nature',
      question: `What is ${therapistName}?`,
      options: [
        'A licensed human therapist',
        'An artificial intelligence system',
        'A medical doctor',
        'A certified counselor'
      ],
      correctAnswer: 1,
      explanation: `${therapistName} is an AI system, not a human professional.`
    },
    {
      id: 'limitations',
      question: 'What can AI therapy NOT do?',
      options: [
        'Provide general emotional support',
        'Prescribe medications and diagnose conditions',
        'Suggest coping strategies',
        'Listen to your concerns'
      ],
      correctAnswer: 1,
      explanation: 'AI cannot prescribe medications, make diagnoses, or replace professional medical care.'
    },
    {
      id: 'crisis-help',
      question: 'In a mental health crisis, what should you do?',
      options: [
        'Only talk to the AI therapist',
        'Wait for the crisis to pass',
        'Contact 988 Suicide Lifeline or 911',
        'Ask the AI for medication advice'
      ],
      correctAnswer: 2,
      explanation: 'Always contact human crisis support (988, 741741, or 911) for mental health emergencies.'
    }
  ]

  const handleTestAnswer = (questionId: string, answerIndex: number) => {
    setTestAnswers(prev => ({ ...prev, [questionId]: answerIndex }))
    
    const question = comprehensionQuestions.find(q => q.id === questionId)
    const isCorrect = question?.correctAnswer === answerIndex
    
    setTestResults(prev => ({ ...prev, [questionId]: isCorrect }))
  }

  const checkAllCorrect = () => {
    const allQuestionsAnswered = comprehensionQuestions.every(q => q.id in testResults)
    const allAnswersCorrect = comprehensionQuestions.every(q => testResults[q.id] === true)
    
    if (allQuestionsAnswered && allAnswersCorrect) {
      setAllCorrect(true)
      setHasPassedTest(true)
    }
  }

  useEffect(() => {
    checkAllCorrect()
  }, [testResults])

  const canProceed = () => {
    const hasReadEnough = readingTime >= minReadingTime
    const hasPassedRequiredTest = !showComprehensionTest || hasPassedTest
    return hasReadEnough && hasPassedRequiredTest
  }

  const handleAccept = () => {
    if (canProceed()) {
      onAccept?.()
      setIsVisible(false)
    }
  }

  const handleDecline = () => {
    onDecline?.()
    setIsVisible(false)
  }

  const steps = disclosureContent[type].steps

  if (!isVisible) return null

  return (
    <AnimatePresence>
      <motion.div
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        exit={{ opacity: 0 }}
        className={cn(
          "fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50",
          className
        )}
      >
        <motion.div
          initial={{ scale: 0.95, opacity: 0 }}
          animate={{ scale: 1, opacity: 1 }}
          exit={{ scale: 0.95, opacity: 0 }}
          className="bg-white rounded-xl shadow-2xl max-w-4xl w-full max-h-[90vh] overflow-hidden"
        >
          {/* Header */}
          <div className="bg-gradient-to-r from-blue-600 to-purple-600 text-white p-6">
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-3">
                <Bot className="h-8 w-8" />
                <div>
                  <h2 className="text-2xl font-bold">AI Therapy Disclosure (2025)</h2>
                  <p className="text-blue-100">
                    Important information before starting your session
                  </p>
                </div>
              </div>
              {!mandatory && (
                <button
                  onClick={handleDecline}
                  className="text-white/80 hover:text-white transition-colors"
                >
                  <X className="h-6 w-6" />
                </button>
              )}
            </div>

            {/* Progress */}
            <div className="mt-4">
              <div className="flex items-center justify-between text-sm text-blue-100 mb-2">
                <span>Step {currentStep + 1} of {steps.length}</span>
                <span>
                  Reading time: {Math.floor(readingTime / 1000)}s 
                  {readingTime < minReadingTime && ` (min ${Math.floor(minReadingTime / 1000)}s)`}
                </span>
              </div>
              <div className="w-full bg-blue-500/30 rounded-full h-2">
                <div
                  className="bg-white h-2 rounded-full transition-all duration-300"
                  style={{ width: `${((currentStep + 1) / steps.length) * 100}%` }}
                />
              </div>
            </div>
          </div>

          {/* Content */}
          <div className="p-6 max-h-[60vh] overflow-y-auto">
            <AnimatePresence mode="wait">
              <motion.div
                key={currentStep}
                initial={{ opacity: 0, x: 20 }}
                animate={{ opacity: 1, x: 0 }}
                exit={{ opacity: 0, x: -20 }}
                transition={{ duration: 0.3 }}
                className="space-y-6"
              >
                <div className="flex items-center space-x-3 mb-4">
                  {React.createElement(steps[currentStep].icon, {
                    className: "h-6 w-6 text-blue-600"
                  })}
                  <h3 className="text-xl font-bold text-gray-900">
                    {steps[currentStep].title}
                  </h3>
                </div>

                {steps[currentStep].content}

                {/* Comprehension Test */}
                {showComprehensionTest && currentStep === steps.length - 1 && !showTest && (
                  <div className="mt-6">
                    <button
                      onClick={() => setShowTest(true)}
                      className="w-full bg-blue-600 text-white py-3 px-4 rounded-lg hover:bg-blue-700 transition-colors font-medium"
                    >
                      Take Comprehension Test
                    </button>
                  </div>
                )}

                {showTest && (
                  <motion.div
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    className="mt-6 space-y-6 bg-gray-50 rounded-lg p-6"
                  >
                    <h4 className="text-lg font-semibold text-gray-900 flex items-center space-x-2">
                      <HelpCircle className="h-5 w-5 text-blue-600" />
                      <span>Comprehension Check</span>
                    </h4>

                    {comprehensionQuestions.map((question, index) => (
                      <div key={question.id} className="space-y-3">
                        <p className="font-medium text-gray-800">
                          {index + 1}. {question.question}
                        </p>
                        <div className="space-y-2">
                          {question.options.map((option, optionIndex) => (
                            <label
                              key={optionIndex}
                              className={cn(
                                "flex items-center space-x-3 p-3 rounded-lg border cursor-pointer transition-colors",
                                testAnswers[question.id] === optionIndex
                                  ? testResults[question.id]
                                    ? "bg-green-50 border-green-200 text-green-800"
                                    : "bg-red-50 border-red-200 text-red-800"
                                  : "bg-white border-gray-200 hover:bg-gray-50"
                              )}
                            >
                              <input
                                type="radio"
                                name={question.id}
                                checked={testAnswers[question.id] === optionIndex}
                                onChange={() => handleTestAnswer(question.id, optionIndex)}
                                className="text-blue-600"
                              />
                              <span>{option}</span>
                              {testAnswers[question.id] === optionIndex && testResults[question.id] !== undefined && (
                                <CheckCircle className={cn(
                                  "h-4 w-4 ml-auto",
                                  testResults[question.id] ? "text-green-600" : "text-red-600"
                                )} />
                              )}
                            </label>
                          ))}
                        </div>
                        {testAnswers[question.id] !== undefined && !testResults[question.id] && (
                          <p className="text-sm text-red-600 bg-red-50 p-2 rounded">
                            {question.explanation}
                          </p>
                        )}
                      </div>
                    ))}

                    {allCorrect && (
                      <div className="bg-green-50 border border-green-200 rounded-lg p-4 flex items-center space-x-3">
                        <CheckCircle className="h-5 w-5 text-green-600" />
                        <span className="text-green-800 font-medium">
                          Great! You've demonstrated understanding of the AI therapy system.
                        </span>
                      </div>
                    )}
                  </motion.div>
                )}
              </motion.div>
            </AnimatePresence>
          </div>

          {/* Footer */}
          <div className="border-t bg-gray-50 p-6">
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-4">
                {currentStep > 0 && (
                  <button
                    onClick={() => setCurrentStep(prev => prev - 1)}
                    className="px-4 py-2 text-gray-600 hover:text-gray-800 transition-colors"
                  >
                    Previous
                  </button>
                )}
              </div>

              <div className="flex items-center space-x-4">
                {readingTime < minReadingTime && (
                  <div className="flex items-center space-x-2 text-sm text-gray-500">
                    <Clock className="h-4 w-4" />
                    <span>Please read for {Math.ceil((minReadingTime - readingTime) / 1000)}s more</span>
                  </div>
                )}

                {currentStep < steps.length - 1 ? (
                  <button
                    onClick={() => setCurrentStep(prev => prev + 1)}
                    className="bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 transition-colors"
                  >
                    Next
                  </button>
                ) : (
                  <div className="flex space-x-3">
                    {!mandatory && (
                      <button
                        onClick={handleDecline}
                        className="px-6 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors"
                      >
                        Decline
                      </button>
                    )}
                    <button
                      onClick={handleAccept}
                      disabled={!canProceed()}
                      className={cn(
                        "px-6 py-2 rounded-lg transition-colors font-medium",
                        canProceed()
                          ? "bg-green-600 text-white hover:bg-green-700"
                          : "bg-gray-300 text-gray-500 cursor-not-allowed"
                      )}
                    >
                      {canProceed() ? "I Understand & Accept" : "Complete Requirements First"}
                    </button>
                  </div>
                )}
              </div>
            </div>
          </div>
        </motion.div>
      </motion.div>
    </AnimatePresence>
  )
}