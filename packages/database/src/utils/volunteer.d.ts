/**
 * ASTRAL_CORE 2.0 Database Utilities - Volunteer Operations
 * Utility functions for volunteer-related database operations
 */
export declare function createVolunteer(data: {
    anonymousId: string;
    specializations?: string[];
    languages?: string[];
    timezone?: string;
}): Promise<{
    status: import("packages/database/generated/client").$Enums.VolunteerStatus;
    averageRating: number | null;
    currentLoad: number;
    id: string;
    anonymousId: string;
    specializations: string[];
    languages: string[];
    responseRate: number;
    maxConcurrent: number;
    isActive: boolean;
    burnoutScore: number;
    timezone: string | null;
    trainingHours: number;
    certifications: import("packages/database/generated/client/runtime/library").JsonValue[];
    backgroundCheck: import("packages/database/generated/client").$Enums.VerificationStatus;
    sessionsCount: number;
    hoursVolunteered: number;
    schedule: import("packages/database/generated/client/runtime/library").JsonValue | null;
    lastActive: Date;
    needsSupport: boolean;
    emergencyResponder: boolean;
    emergencyAvailable: boolean;
} | {
    status: import("packages/database/generated/client").$Enums.VolunteerStatus;
    averageRating: number | null;
    currentLoad: number;
    id: string;
    anonymousId: string;
    specializations: string[];
    languages: string[];
    responseRate: number;
    maxConcurrent: number;
    isActive: boolean;
    burnoutScore: number;
    timezone: string | null;
    trainingHours: number;
    certifications: import("packages/database/generated/client/runtime/library").JsonValue[];
    backgroundCheck: import("packages/database/generated/client").$Enums.VerificationStatus;
    sessionsCount: number;
    hoursVolunteered: number;
    schedule: import("packages/database/generated/client/runtime/library").JsonValue | null;
    lastActive: Date;
    needsSupport: boolean;
    emergencyResponder: boolean;
    emergencyAvailable: boolean;
}>;
export declare function updateVolunteerStatus(volunteerId: string, status: string): Promise<{
    status: import("packages/database/generated/client").$Enums.VolunteerStatus;
    averageRating: number | null;
    currentLoad: number;
    id: string;
    anonymousId: string;
    specializations: string[];
    languages: string[];
    responseRate: number;
    maxConcurrent: number;
    isActive: boolean;
    burnoutScore: number;
    timezone: string | null;
    trainingHours: number;
    certifications: import("packages/database/generated/client/runtime/library").JsonValue[];
    backgroundCheck: import("packages/database/generated/client").$Enums.VerificationStatus;
    sessionsCount: number;
    hoursVolunteered: number;
    schedule: import("packages/database/generated/client/runtime/library").JsonValue | null;
    lastActive: Date;
    needsSupport: boolean;
    emergencyResponder: boolean;
    emergencyAvailable: boolean;
} | {
    status: import("packages/database/generated/client").$Enums.VolunteerStatus;
    averageRating: number | null;
    currentLoad: number;
    id: string;
    anonymousId: string;
    specializations: string[];
    languages: string[];
    responseRate: number;
    maxConcurrent: number;
    isActive: boolean;
    burnoutScore: number;
    timezone: string | null;
    trainingHours: number;
    certifications: import("packages/database/generated/client/runtime/library").JsonValue[];
    backgroundCheck: import("packages/database/generated/client").$Enums.VerificationStatus;
    sessionsCount: number;
    hoursVolunteered: number;
    schedule: import("packages/database/generated/client/runtime/library").JsonValue | null;
    lastActive: Date;
    needsSupport: boolean;
    emergencyResponder: boolean;
    emergencyAvailable: boolean;
}>;
export declare function assignVolunteerToSession(sessionId: string, volunteerId: string): Promise<{
    status: import("packages/database/generated/client").$Enums.VolunteerStatus;
    averageRating: number | null;
    currentLoad: number;
    id: string;
    anonymousId: string;
    specializations: string[];
    languages: string[];
    responseRate: number;
    maxConcurrent: number;
    isActive: boolean;
    burnoutScore: number;
    timezone: string | null;
    trainingHours: number;
    certifications: import("packages/database/generated/client/runtime/library").JsonValue[];
    backgroundCheck: import("packages/database/generated/client").$Enums.VerificationStatus;
    sessionsCount: number;
    hoursVolunteered: number;
    schedule: import("packages/database/generated/client/runtime/library").JsonValue | null;
    lastActive: Date;
    needsSupport: boolean;
    emergencyResponder: boolean;
    emergencyAvailable: boolean;
} | {
    status: import("packages/database/generated/client").$Enums.VolunteerStatus;
    averageRating: number | null;
    currentLoad: number;
    id: string;
    anonymousId: string;
    specializations: string[];
    languages: string[];
    responseRate: number;
    maxConcurrent: number;
    isActive: boolean;
    burnoutScore: number;
    timezone: string | null;
    trainingHours: number;
    certifications: import("packages/database/generated/client/runtime/library").JsonValue[];
    backgroundCheck: import("packages/database/generated/client").$Enums.VerificationStatus;
    sessionsCount: number;
    hoursVolunteered: number;
    schedule: import("packages/database/generated/client/runtime/library").JsonValue | null;
    lastActive: Date;
    needsSupport: boolean;
    emergencyResponder: boolean;
    emergencyAvailable: boolean;
}>;
export declare function recordVolunteerSession(data: {
    volunteerId: string;
    sessionType: string;
    crisisSessionId?: string;
}): Promise<{
    volunteerId: string;
    id: string;
    startedAt: Date;
    endedAt: Date | null;
    responseTime: number | null;
    outcome: import("packages/database/generated/client").$Enums.SessionOutcome | null;
    duration: number | null;
    sessionType: import("packages/database/generated/client").$Enums.VolunteerSessionType;
    crisisSessionId: string | null;
    userSatisfaction: number | null;
} | {
    volunteerId: string;
    id: string;
    startedAt: Date;
    endedAt: Date | null;
    responseTime: number | null;
    outcome: import("packages/database/generated/client").$Enums.SessionOutcome | null;
    duration: number | null;
    sessionType: import("packages/database/generated/client").$Enums.VolunteerSessionType;
    crisisSessionId: string | null;
    userSatisfaction: number | null;
}>;
//# sourceMappingURL=volunteer.d.ts.map