
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.1
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.1",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.CrisisSessionScalarFieldEnum = {
  id: 'id',
  sessionToken: 'sessionToken',
  anonymousId: 'anonymousId',
  severity: 'severity',
  status: 'status',
  responderId: 'responderId',
  startedAt: 'startedAt',
  endedAt: 'endedAt',
  responseTimeMs: 'responseTimeMs',
  outcome: 'outcome',
  encryptedData: 'encryptedData',
  keyDerivationSalt: 'keyDerivationSalt',
  handoffTime: 'handoffTime',
  resolutionTime: 'resolutionTime',
  emergencyTriggered: 'emergencyTriggered',
  escalatedAt: 'escalatedAt',
  escalationType: 'escalationType'
};

exports.Prisma.CrisisMessageScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  senderType: 'senderType',
  senderId: 'senderId',
  encryptedContent: 'encryptedContent',
  messageHash: 'messageHash',
  timestamp: 'timestamp',
  messageType: 'messageType',
  priority: 'priority',
  sentimentScore: 'sentimentScore',
  riskScore: 'riskScore',
  riskLevel: 'riskLevel',
  keywordsDetected: 'keywordsDetected'
};

exports.Prisma.CrisisEscalationScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  triggeredBy: 'triggeredBy',
  severity: 'severity',
  reason: 'reason',
  actionsTaken: 'actionsTaken',
  emergencyContacted: 'emergencyContacted',
  lifeline988Called: 'lifeline988Called',
  triggeredAt: 'triggeredAt',
  resolvedAt: 'resolvedAt',
  responseTime: 'responseTime',
  handledBy: 'handledBy',
  outcome: 'outcome'
};

exports.Prisma.TetherLinkScalarFieldEnum = {
  id: 'id',
  seekerId: 'seekerId',
  supporterId: 'supporterId',
  strength: 'strength',
  trustScore: 'trustScore',
  established: 'established',
  lastActivity: 'lastActivity',
  pulseInterval: 'pulseInterval',
  lastPulse: 'lastPulse',
  missedPulses: 'missedPulses',
  emergencyActive: 'emergencyActive',
  emergencyType: 'emergencyType',
  lastEmergency: 'lastEmergency',
  matchingScore: 'matchingScore',
  specialties: 'specialties',
  languages: 'languages',
  timezone: 'timezone',
  dataSharing: 'dataSharing',
  locationSharing: 'locationSharing',
  emergencyContact: 'emergencyContact',
  encryptedMeta: 'encryptedMeta'
};

exports.Prisma.TetherPulseScalarFieldEnum = {
  id: 'id',
  tetherId: 'tetherId',
  pulseType: 'pulseType',
  strength: 'strength',
  mood: 'mood',
  status: 'status',
  message: 'message',
  emergencySignal: 'emergencySignal',
  urgencyLevel: 'urgencyLevel',
  timestamp: 'timestamp',
  acknowledged: 'acknowledged',
  acknowledgedAt: 'acknowledgedAt'
};

exports.Prisma.TetherEmergencyScalarFieldEnum = {
  id: 'id',
  tetherId: 'tetherId',
  triggerUserId: 'triggerUserId',
  emergencyType: 'emergencyType',
  severity: 'severity',
  description: 'description',
  location: 'location',
  triggeredAt: 'triggeredAt',
  acknowledgedAt: 'acknowledgedAt',
  respondedAt: 'respondedAt',
  resolvedAt: 'resolvedAt',
  responseTime: 'responseTime',
  actionsTaken: 'actionsTaken',
  outcome: 'outcome',
  helpersNotified: 'helpersNotified',
  emergencyContacts: 'emergencyContacts'
};

exports.Prisma.VolunteerScalarFieldEnum = {
  id: 'id',
  anonymousId: 'anonymousId',
  status: 'status',
  trainingHours: 'trainingHours',
  certifications: 'certifications',
  specializations: 'specializations',
  languages: 'languages',
  backgroundCheck: 'backgroundCheck',
  sessionsCount: 'sessionsCount',
  hoursVolunteered: 'hoursVolunteered',
  averageRating: 'averageRating',
  responseRate: 'responseRate',
  isActive: 'isActive',
  currentLoad: 'currentLoad',
  maxConcurrent: 'maxConcurrent',
  schedule: 'schedule',
  timezone: 'timezone',
  lastActive: 'lastActive',
  burnoutScore: 'burnoutScore',
  needsSupport: 'needsSupport',
  emergencyResponder: 'emergencyResponder',
  emergencyAvailable: 'emergencyAvailable'
};

exports.Prisma.VolunteerTrainingScalarFieldEnum = {
  id: 'id',
  volunteerId: 'volunteerId',
  moduleId: 'moduleId',
  status: 'status',
  startedAt: 'startedAt',
  completedAt: 'completedAt',
  score: 'score',
  passingScore: 'passingScore',
  attempts: 'attempts',
  moduleTitle: 'moduleTitle',
  moduleType: 'moduleType',
  duration: 'duration',
  content: 'content'
};

exports.Prisma.VolunteerSessionScalarFieldEnum = {
  id: 'id',
  volunteerId: 'volunteerId',
  sessionType: 'sessionType',
  startedAt: 'startedAt',
  endedAt: 'endedAt',
  duration: 'duration',
  crisisSessionId: 'crisisSessionId',
  responseTime: 'responseTime',
  userSatisfaction: 'userSatisfaction',
  outcome: 'outcome'
};

exports.Prisma.VolunteerFeedbackScalarFieldEnum = {
  id: 'id',
  volunteerId: 'volunteerId',
  sessionId: 'sessionId',
  feedbackType: 'feedbackType',
  rating: 'rating',
  comment: 'comment',
  submittedBy: 'submittedBy',
  sourceType: 'sourceType',
  submittedAt: 'submittedAt',
  isAnonymous: 'isAnonymous',
  isApproved: 'isApproved',
  moderatedAt: 'moderatedAt',
  moderatedBy: 'moderatedBy'
};

exports.Prisma.CrisisResourceUsageScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  resourceId: 'resourceId',
  accessedAt: 'accessedAt',
  timeSpent: 'timeSpent',
  wasHelpful: 'wasHelpful',
  helpfulRating: 'helpfulRating',
  resourceTitle: 'resourceTitle',
  resourceType: 'resourceType'
};

exports.Prisma.SafetyReportScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  messageId: 'messageId',
  reportType: 'reportType',
  severity: 'severity',
  status: 'status',
  content: 'content',
  reason: 'reason',
  confidence: 'confidence',
  aiAnalysis: 'aiAnalysis',
  keywordsMatched: 'keywordsMatched',
  riskScore: 'riskScore',
  reviewedBy: 'reviewedBy',
  reviewedAt: 'reviewedAt',
  reviewNotes: 'reviewNotes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  action: 'action',
  resource: 'resource',
  resourceId: 'resourceId',
  details: 'details',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  success: 'success',
  errorMessage: 'errorMessage',
  timestamp: 'timestamp',
  sessionId: 'sessionId'
};

exports.Prisma.AnalyticsEventScalarFieldEnum = {
  id: 'id',
  eventType: 'eventType',
  eventName: 'eventName',
  userHash: 'userHash',
  sessionId: 'sessionId',
  properties: 'properties',
  timestamp: 'timestamp',
  responseTime: 'responseTime',
  success: 'success',
  errorCode: 'errorCode'
};

exports.Prisma.PerformanceMetricScalarFieldEnum = {
  id: 'id',
  metricType: 'metricType',
  value: 'value',
  unit: 'unit',
  endpoint: 'endpoint',
  region: 'region',
  timestamp: 'timestamp',
  target: 'target',
  threshold: 'threshold',
  status: 'status'
};

exports.Prisma.SystemHealthScalarFieldEnum = {
  id: 'id',
  component: 'component',
  status: 'status',
  responseTime: 'responseTime',
  uptime: 'uptime',
  errorRate: 'errorRate',
  lastError: 'lastError',
  errorMessage: 'errorMessage',
  cpuUsage: 'cpuUsage',
  memoryUsage: 'memoryUsage',
  diskUsage: 'diskUsage',
  timestamp: 'timestamp'
};

exports.Prisma.CrisisResourceScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  category: 'category',
  phoneNumber: 'phoneNumber',
  url: 'url',
  email: 'email',
  textNumber: 'textNumber',
  content: 'content',
  instructions: 'instructions',
  available24_7: 'available24_7',
  languages: 'languages',
  countries: 'countries',
  regions: 'regions',
  priority: 'priority',
  isEmergency: 'isEmergency',
  severityMin: 'severityMin',
  tags: 'tags',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PublicMetricsScalarFieldEnum = {
  id: 'id',
  metricName: 'metricName',
  value: 'value',
  displayValue: 'displayValue',
  description: 'description',
  isPublic: 'isPublic',
  displayOrder: 'displayOrder',
  icon: 'icon',
  color: 'color',
  lastUpdated: 'lastUpdated',
  updateFrequency: 'updateFrequency'
};

exports.Prisma.EmergencyContactScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  encryptedName: 'encryptedName',
  encryptedPhone: 'encryptedPhone',
  encryptedEmail: 'encryptedEmail',
  relationship: 'relationship',
  priority: 'priority',
  contactMethod: 'contactMethod',
  timezone: 'timezone',
  availableHours: 'availableHours',
  preferredMethod: 'preferredMethod',
  autoNotify: 'autoNotify',
  crisisOnly: 'crisisOnly',
  hasConsent: 'hasConsent',
  consentDate: 'consentDate',
  keyDerivationSalt: 'keyDerivationSalt',
  isVerified: 'isVerified',
  verifiedAt: 'verifiedAt',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  lastContacted: 'lastContacted'
};

exports.Prisma.EmergencyNotificationScalarFieldEnum = {
  id: 'id',
  emergencyContactId: 'emergencyContactId',
  sessionId: 'sessionId',
  tetherEmergencyId: 'tetherEmergencyId',
  notificationType: 'notificationType',
  severity: 'severity',
  message: 'message',
  sentAt: 'sentAt',
  deliveredAt: 'deliveredAt',
  acknowledgedAt: 'acknowledgedAt',
  responseReceived: 'responseReceived',
  responseTime: 'responseTime',
  method: 'method',
  status: 'status',
  attempts: 'attempts',
  maxAttempts: 'maxAttempts',
  errorMessage: 'errorMessage',
  nextRetryAt: 'nextRetryAt'
};

exports.Prisma.WebSocketConnectionScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  userType: 'userType',
  userId: 'userId',
  isActive: 'isActive',
  createdAt: 'createdAt',
  lastActivity: 'lastActivity',
  expiresAt: 'expiresAt',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  anonymousId: 'anonymousId',
  email: 'email',
  username: 'username',
  isAnonymous: 'isAnonymous',
  lastLogin: 'lastLogin',
  dataSharing: 'dataSharing',
  allowAnalytics: 'allowAnalytics',
  dataRetentionDays: 'dataRetentionDays',
  verificationStatus: 'verificationStatus',
  professionalType: 'professionalType',
  licenseNumber: 'licenseNumber',
  verifiedAt: 'verifiedAt',
  encryptedProfile: 'encryptedProfile',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MoodEntryScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  mood: 'mood',
  emotions: 'emotions',
  triggers: 'triggers',
  activities: 'activities',
  sleepHours: 'sleepHours',
  notes: 'notes',
  weather: 'weather',
  medication: 'medication',
  socialInteraction: 'socialInteraction',
  timestamp: 'timestamp'
};

exports.Prisma.SafetyPlanScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  version: 'version',
  isActive: 'isActive',
  encryptedContent: 'encryptedContent',
  contentHash: 'contentHash',
  sharedWith: 'sharedWith',
  emergencyShare: 'emergencyShare',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SafetyPlanVersionScalarFieldEnum = {
  id: 'id',
  safetyPlanId: 'safetyPlanId',
  version: 'version',
  changeLog: 'changeLog',
  encryptedContent: 'encryptedContent',
  contentHash: 'contentHash',
  createdAt: 'createdAt',
  createdBy: 'createdBy'
};

exports.Prisma.UserProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  displayName: 'displayName',
  level: 'level',
  totalXP: 'totalXP',
  preferences: 'preferences',
  stats: 'stats',
  joinDate: 'joinDate',
  lastActiveDate: 'lastActiveDate'
};

exports.Prisma.AchievementScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  category: 'category',
  rarity: 'rarity',
  requirements: 'requirements',
  xpReward: 'xpReward',
  pointReward: 'pointReward',
  icon: 'icon',
  color: 'color',
  isActive: 'isActive'
};

exports.Prisma.UserAchievementScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  achievementId: 'achievementId',
  progress: 'progress',
  isUnlocked: 'isUnlocked',
  unlockedAt: 'unlockedAt',
  createdAt: 'createdAt'
};

exports.Prisma.ChallengeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  type: 'type',
  difficulty: 'difficulty',
  requirements: 'requirements',
  duration: 'duration',
  xpReward: 'xpReward',
  pointReward: 'pointReward',
  startDate: 'startDate',
  endDate: 'endDate',
  isActive: 'isActive'
};

exports.Prisma.UserChallengeScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  challengeId: 'challengeId',
  progress: 'progress',
  isCompleted: 'isCompleted',
  completedAt: 'completedAt',
  startedAt: 'startedAt',
  data: 'data'
};

exports.Prisma.UserActivityScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  description: 'description',
  xpEarned: 'xpEarned',
  pointsEarned: 'pointsEarned',
  metadata: 'metadata',
  timestamp: 'timestamp'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};
exports.CrisisStatus = exports.$Enums.CrisisStatus = {
  ACTIVE: 'ACTIVE',
  ASSIGNED: 'ASSIGNED',
  RESOLVED: 'RESOLVED',
  ESCALATED: 'ESCALATED',
  ABANDONED: 'ABANDONED'
};

exports.EscalationType = exports.$Enums.EscalationType = {
  AUTOMATIC_KEYWORD: 'AUTOMATIC_KEYWORD',
  MANUAL_VOLUNTEER: 'MANUAL_VOLUNTEER',
  USER_REQUEST: 'USER_REQUEST',
  SYSTEM_TIMEOUT: 'SYSTEM_TIMEOUT',
  EMERGENCY_SERVICES: 'EMERGENCY_SERVICES'
};

exports.MessageSender = exports.$Enums.MessageSender = {
  ANONYMOUS_USER: 'ANONYMOUS_USER',
  VOLUNTEER: 'VOLUNTEER',
  SYSTEM: 'SYSTEM',
  AI_ASSISTANT: 'AI_ASSISTANT'
};

exports.MessageType = exports.$Enums.MessageType = {
  TEXT: 'TEXT',
  VOICE_NOTE: 'VOICE_NOTE',
  IMAGE: 'IMAGE',
  SYSTEM_MESSAGE: 'SYSTEM_MESSAGE',
  RESOURCE_SHARE: 'RESOURCE_SHARE'
};

exports.MessagePriority = exports.$Enums.MessagePriority = {
  LOW: 'LOW',
  NORMAL: 'NORMAL',
  HIGH: 'HIGH',
  URGENT: 'URGENT',
  EMERGENCY: 'EMERGENCY'
};

exports.EscalationTrigger = exports.$Enums.EscalationTrigger = {
  KEYWORD_DETECTION: 'KEYWORD_DETECTION',
  SEVERITY_INCREASE: 'SEVERITY_INCREASE',
  VOLUNTEER_REQUEST: 'VOLUNTEER_REQUEST',
  USER_REQUEST: 'USER_REQUEST',
  TIMEOUT: 'TIMEOUT',
  AI_ASSESSMENT: 'AI_ASSESSMENT'
};

exports.EscalationSeverity = exports.$Enums.EscalationSeverity = {
  MODERATE: 'MODERATE',
  HIGH: 'HIGH',
  CRITICAL: 'CRITICAL',
  EMERGENCY: 'EMERGENCY'
};

exports.EscalationOutcome = exports.$Enums.EscalationOutcome = {
  RESOLVED_INTERNALLY: 'RESOLVED_INTERNALLY',
  REFERRED_TO_PROFESSIONAL: 'REFERRED_TO_PROFESSIONAL',
  EMERGENCY_SERVICES_CONTACTED: 'EMERGENCY_SERVICES_CONTACTED',
  USER_DISCONNECTED: 'USER_DISCONNECTED',
  ONGOING: 'ONGOING'
};

exports.EmergencyType = exports.$Enums.EmergencyType = {
  MENTAL_HEALTH_CRISIS: 'MENTAL_HEALTH_CRISIS',
  SELF_HARM_RISK: 'SELF_HARM_RISK',
  SUICIDAL_IDEATION: 'SUICIDAL_IDEATION',
  PANIC_ATTACK: 'PANIC_ATTACK',
  MEDICAL_EMERGENCY: 'MEDICAL_EMERGENCY',
  SAFETY_CONCERN: 'SAFETY_CONCERN'
};

exports.TetherDataSharing = exports.$Enums.TetherDataSharing = {
  MINIMAL: 'MINIMAL',
  MODERATE: 'MODERATE',
  FULL: 'FULL'
};

exports.PulseType = exports.$Enums.PulseType = {
  HEARTBEAT: 'HEARTBEAT',
  CHECK_IN: 'CHECK_IN',
  MOOD_UPDATE: 'MOOD_UPDATE',
  EMERGENCY: 'EMERGENCY',
  CUSTOM: 'CUSTOM'
};

exports.UserStatus = exports.$Enums.UserStatus = {
  NORMAL: 'NORMAL',
  STRUGGLING: 'STRUGGLING',
  CRISIS: 'CRISIS',
  EMERGENCY: 'EMERGENCY',
  OFFLINE: 'OFFLINE'
};

exports.UrgencyLevel = exports.$Enums.UrgencyLevel = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  CRITICAL: 'CRITICAL'
};

exports.EmergencySeverity = exports.$Enums.EmergencySeverity = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  CRITICAL: 'CRITICAL',
  LIFE_THREATENING: 'LIFE_THREATENING'
};

exports.EmergencyOutcome = exports.$Enums.EmergencyOutcome = {
  RESOLVED: 'RESOLVED',
  ESCALATED: 'ESCALATED',
  EMERGENCY_SERVICES: 'EMERGENCY_SERVICES',
  ONGOING: 'ONGOING',
  USER_SAFE: 'USER_SAFE'
};

exports.VolunteerStatus = exports.$Enums.VolunteerStatus = {
  PENDING: 'PENDING',
  TRAINING: 'TRAINING',
  BACKGROUND_CHECK: 'BACKGROUND_CHECK',
  VERIFIED: 'VERIFIED',
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  SUSPENDED: 'SUSPENDED',
  REVOKED: 'REVOKED'
};

exports.VerificationStatus = exports.$Enums.VerificationStatus = {
  PENDING: 'PENDING',
  IN_PROGRESS: 'IN_PROGRESS',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  EXPIRED: 'EXPIRED'
};

exports.TrainingStatus = exports.$Enums.TrainingStatus = {
  NOT_STARTED: 'NOT_STARTED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  EXPIRED: 'EXPIRED'
};

exports.TrainingType = exports.$Enums.TrainingType = {
  CRISIS_INTERVENTION: 'CRISIS_INTERVENTION',
  ACTIVE_LISTENING: 'ACTIVE_LISTENING',
  DE_ESCALATION: 'DE_ESCALATION',
  PLATFORM_TRAINING: 'PLATFORM_TRAINING',
  SPECIALIZED_TOPIC: 'SPECIALIZED_TOPIC',
  ONGOING_EDUCATION: 'ONGOING_EDUCATION'
};

exports.VolunteerSessionType = exports.$Enums.VolunteerSessionType = {
  CRISIS_RESPONSE: 'CRISIS_RESPONSE',
  PEER_SUPPORT: 'PEER_SUPPORT',
  GROUP_MODERATION: 'GROUP_MODERATION',
  TRAINING_SESSION: 'TRAINING_SESSION',
  SUPERVISION: 'SUPERVISION'
};

exports.SessionOutcome = exports.$Enums.SessionOutcome = {
  SUCCESSFUL_RESOLUTION: 'SUCCESSFUL_RESOLUTION',
  REFERRED_TO_PROFESSIONAL: 'REFERRED_TO_PROFESSIONAL',
  USER_DISCONNECTED: 'USER_DISCONNECTED',
  ESCALATED_TO_EMERGENCY: 'ESCALATED_TO_EMERGENCY',
  ONGOING: 'ONGOING'
};

exports.FeedbackType = exports.$Enums.FeedbackType = {
  GENERAL: 'GENERAL',
  SESSION_QUALITY: 'SESSION_QUALITY',
  RESPONSE_TIME: 'RESPONSE_TIME',
  PROFESSIONALISM: 'PROFESSIONALISM',
  EMPATHY: 'EMPATHY',
  EFFECTIVENESS: 'EFFECTIVENESS',
  TECHNICAL_ISSUES: 'TECHNICAL_ISSUES',
  COMMUNICATION: 'COMMUNICATION',
  COMPLAINT: 'COMPLAINT',
  SUGGESTION: 'SUGGESTION',
  APPRECIATION: 'APPRECIATION',
  OTHER: 'OTHER'
};

exports.FeedbackSource = exports.$Enums.FeedbackSource = {
  USER: 'USER',
  SYSTEM: 'SYSTEM',
  PEER_REVIEW: 'PEER_REVIEW',
  SUPERVISOR: 'SUPERVISOR',
  AUTOMATED: 'AUTOMATED',
  ANONYMOUS: 'ANONYMOUS',
  OTHER: 'OTHER'
};

exports.ResourceCategory = exports.$Enums.ResourceCategory = {
  CRISIS_HOTLINE: 'CRISIS_HOTLINE',
  EMERGENCY_SERVICE: 'EMERGENCY_SERVICE',
  SELF_HELP_TOOL: 'SELF_HELP_TOOL',
  BREATHING_EXERCISE: 'BREATHING_EXERCISE',
  GROUNDING_TECHNIQUE: 'GROUNDING_TECHNIQUE',
  SAFETY_PLANNING: 'SAFETY_PLANNING',
  PROFESSIONAL_HELP: 'PROFESSIONAL_HELP',
  PEER_SUPPORT: 'PEER_SUPPORT'
};

exports.ReportType = exports.$Enums.ReportType = {
  CONTENT_VIOLATION: 'CONTENT_VIOLATION',
  HARASSMENT: 'HARASSMENT',
  SPAM: 'SPAM',
  SELF_HARM_CONTENT: 'SELF_HARM_CONTENT',
  INAPPROPRIATE_BEHAVIOR: 'INAPPROPRIATE_BEHAVIOR',
  TECHNICAL_ISSUE: 'TECHNICAL_ISSUE',
  PRIVACY_CONCERN: 'PRIVACY_CONCERN',
  OTHER: 'OTHER'
};

exports.ReportSeverity = exports.$Enums.ReportSeverity = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  CRITICAL: 'CRITICAL',
  EMERGENCY: 'EMERGENCY'
};

exports.ReportStatus = exports.$Enums.ReportStatus = {
  PENDING: 'PENDING',
  UNDER_REVIEW: 'UNDER_REVIEW',
  RESOLVED: 'RESOLVED',
  DISMISSED: 'DISMISSED',
  ESCALATED: 'ESCALATED'
};

exports.MetricStatus = exports.$Enums.MetricStatus = {
  NORMAL: 'NORMAL',
  WARNING: 'WARNING',
  CRITICAL: 'CRITICAL',
  UNKNOWN: 'UNKNOWN'
};

exports.HealthStatus = exports.$Enums.HealthStatus = {
  HEALTHY: 'HEALTHY',
  DEGRADED: 'DEGRADED',
  UNHEALTHY: 'UNHEALTHY',
  DOWN: 'DOWN'
};

exports.EmergencyNotificationType = exports.$Enums.EmergencyNotificationType = {
  CRISIS_ESCALATION: 'CRISIS_ESCALATION',
  SAFETY_PLAN_ACTIVATION: 'SAFETY_PLAN_ACTIVATION',
  EMERGENCY_ALERT: 'EMERGENCY_ALERT',
  WELLNESS_CHECK: 'WELLNESS_CHECK',
  MEDICAL_EMERGENCY: 'MEDICAL_EMERGENCY',
  SELF_HARM_DETECTED: 'SELF_HARM_DETECTED',
  SUICIDE_RISK: 'SUICIDE_RISK',
  PANIC_ATTACK: 'PANIC_ATTACK',
  CUSTOM_ALERT: 'CUSTOM_ALERT'
};

exports.NotificationStatus = exports.$Enums.NotificationStatus = {
  PENDING: 'PENDING',
  SENT: 'SENT',
  DELIVERED: 'DELIVERED',
  ACKNOWLEDGED: 'ACKNOWLEDGED',
  FAILED: 'FAILED',
  RETRYING: 'RETRYING',
  CANCELLED: 'CANCELLED',
  EXPIRED: 'EXPIRED'
};

exports.UserDataSharing = exports.$Enums.UserDataSharing = {
  MINIMAL: 'MINIMAL',
  ANONYMOUS_ANALYTICS: 'ANONYMOUS_ANALYTICS',
  COMMUNITY_FEATURES: 'COMMUNITY_FEATURES',
  FULL_RESEARCH: 'FULL_RESEARCH'
};

exports.AchievementCategory = exports.$Enums.AchievementCategory = {
  MOOD_TRACKING: 'MOOD_TRACKING',
  CONSISTENCY: 'CONSISTENCY',
  SELF_CARE: 'SELF_CARE',
  CRISIS_MANAGEMENT: 'CRISIS_MANAGEMENT',
  COMMUNITY: 'COMMUNITY',
  PERSONAL_GROWTH: 'PERSONAL_GROWTH',
  WELLNESS_MILESTONES: 'WELLNESS_MILESTONES'
};

exports.AchievementRarity = exports.$Enums.AchievementRarity = {
  COMMON: 'COMMON',
  UNCOMMON: 'UNCOMMON',
  RARE: 'RARE',
  EPIC: 'EPIC',
  LEGENDARY: 'LEGENDARY'
};

exports.ChallengeType = exports.$Enums.ChallengeType = {
  DAILY: 'DAILY',
  WEEKLY: 'WEEKLY',
  MONTHLY: 'MONTHLY',
  MILESTONE: 'MILESTONE',
  COMMUNITY: 'COMMUNITY',
  SEASONAL: 'SEASONAL'
};

exports.ChallengeDifficulty = exports.$Enums.ChallengeDifficulty = {
  EASY: 'EASY',
  MEDIUM: 'MEDIUM',
  HARD: 'HARD',
  EXPERT: 'EXPERT'
};

exports.ActivityType = exports.$Enums.ActivityType = {
  MOOD_LOG: 'MOOD_LOG',
  SAFETY_PLAN_UPDATE: 'SAFETY_PLAN_UPDATE',
  ACHIEVEMENT_UNLOCK: 'ACHIEVEMENT_UNLOCK',
  CHALLENGE_COMPLETE: 'CHALLENGE_COMPLETE',
  LEVEL_UP: 'LEVEL_UP',
  COMMUNITY_INTERACTION: 'COMMUNITY_INTERACTION',
  SELF_CARE_ACTIVITY: 'SELF_CARE_ACTIVITY',
  CRISIS_RESOURCE_ACCESS: 'CRISIS_RESOURCE_ACCESS'
};

exports.Prisma.ModelName = {
  CrisisSession: 'CrisisSession',
  CrisisMessage: 'CrisisMessage',
  CrisisEscalation: 'CrisisEscalation',
  TetherLink: 'TetherLink',
  TetherPulse: 'TetherPulse',
  TetherEmergency: 'TetherEmergency',
  Volunteer: 'Volunteer',
  VolunteerTraining: 'VolunteerTraining',
  VolunteerSession: 'VolunteerSession',
  VolunteerFeedback: 'VolunteerFeedback',
  CrisisResourceUsage: 'CrisisResourceUsage',
  SafetyReport: 'SafetyReport',
  AuditLog: 'AuditLog',
  AnalyticsEvent: 'AnalyticsEvent',
  PerformanceMetric: 'PerformanceMetric',
  SystemHealth: 'SystemHealth',
  CrisisResource: 'CrisisResource',
  PublicMetrics: 'PublicMetrics',
  EmergencyContact: 'EmergencyContact',
  EmergencyNotification: 'EmergencyNotification',
  WebSocketConnection: 'WebSocketConnection',
  User: 'User',
  MoodEntry: 'MoodEntry',
  SafetyPlan: 'SafetyPlan',
  SafetyPlanVersion: 'SafetyPlanVersion',
  UserProfile: 'UserProfile',
  Achievement: 'Achievement',
  UserAchievement: 'UserAchievement',
  Challenge: 'Challenge',
  UserChallenge: 'UserChallenge',
  UserActivity: 'UserActivity'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
