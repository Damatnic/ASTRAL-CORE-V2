# ASTRAL_CORE 2.0 - Docker Compose for Production Deployment
# Secure, scalable, and monitored crisis intervention platform

version: '3.8'

services:
  # ============================================================================
  # WEB APPLICATION - Main Crisis Intervention Platform
  # ============================================================================
  astral-web:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: astral-web-prod
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - NEXTAUTH_URL=${NEXTAUTH_URL}
      - CRISIS_ENCRYPTION_KEY=${CRISIS_ENCRYPTION_KEY}
      - REDIS_URL=${REDIS_URL}
      - SENTRY_DSN=${SENTRY_DSN}
    depends_on:
      - postgres
      - redis
    networks:
      - astral-network
    volumes:
      - /app/logs:/app/logs:rw
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=512m

  # ============================================================================
  # ADMIN DASHBOARD
  # ============================================================================
  astral-admin:
    build:
      context: .
      dockerfile: Dockerfile.admin
      target: production
    container_name: astral-admin-prod
    restart: unless-stopped
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - ADMIN_SECRET=${ADMIN_SECRET}
    depends_on:
      - postgres
    networks:
      - astral-network
    security_opt:
      - no-new-privileges:true

  # ============================================================================
  # DATABASE - PostgreSQL with security hardening
  # ============================================================================
  postgres:
    image: postgres:16-alpine
    container_name: astral-postgres-prod
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=md5
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/db-init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - astral-network
    ports:
      - "127.0.0.1:5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M
    security_opt:
      - no-new-privileges:true

  # ============================================================================
  # REDIS - Session and cache storage
  # ============================================================================
  redis:
    image: redis:7-alpine
    container_name: astral-redis-prod
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 512mb --maxmemory-policy allkeys-lru
    networks:
      - astral-network
    ports:
      - "127.0.0.1:6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 5s
      retries: 5
    security_opt:
      - no-new-privileges:true

  # ============================================================================
  # MONITORING - Prometheus for metrics collection
  # ============================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: astral-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - astral-network
    security_opt:
      - no-new-privileges:true

  # ============================================================================
  # MONITORING - Grafana for metrics visualization
  # ============================================================================
  grafana:
    image: grafana/grafana:latest
    container_name: astral-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - astral-network
    security_opt:
      - no-new-privileges:true

  # ============================================================================
  # REVERSE PROXY - Nginx with SSL termination and security headers
  # ============================================================================
  nginx:
    image: nginx:1.25-alpine
    container_name: astral-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/ssl/certs:ro
      - ./logs/nginx:/var/log/nginx
      - ./nginx/rate-limit:/etc/nginx/rate-limit:ro
    depends_on:
      - astral-web
      - astral-admin
    networks:
      - astral-network
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================================================
  # SYSTEM MONITORING - Node Exporter for host metrics
  # ============================================================================
  node-exporter:
    image: prom/node-exporter:latest
    container_name: astral-node-exporter
    restart: unless-stopped
    ports:
      - "127.0.0.1:9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - astral-network
    security_opt:
      - no-new-privileges:true

  # ============================================================================
  # CONTAINER MONITORING - cAdvisor for container metrics
  # ============================================================================
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: astral-cadvisor
    restart: unless-stopped
    ports:
      - "127.0.0.1:8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
    networks:
      - astral-network
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 256M

# ============================================================================
# NETWORKS
# ============================================================================
networks:
  astral-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ============================================================================
# VOLUMES
# ============================================================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local